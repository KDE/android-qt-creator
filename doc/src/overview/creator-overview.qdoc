/****************************************************************************
**
** This file is part of Qt Creator
**
** Copyright (c) 2011 Nokia Corporation and/or its subsidiary(-ies).
**
** Contact: Nokia Corporation (qt-info@nokia.com)
**
**
** GNU Free Documentation License
**
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!
    \contentspage index.html
    \previouspage creator-getting-started.html
    \page creator-overview.html
    \nextpage creator-quick-tour.html

    \title IDE Overview

    \QC is an integrated development environment (IDE) that provides you with
    tools to design and develop applications with the Qt application framework.
    Qt is designed for developing applications and user interfaces once and
    deploying them across several desktop and mobile operating systems. \QC
    provides you with tools for accomplishing your tasks throughout the whole
    application development life-cycle, from creating a project to deploying the
    application on the target platforms.

    \table
        \row
            \o  \inlineimage creator_managingprojects.png
            \o  \inlineimage creator_designinguserinterface.png
            \o  \inlineimage creator_coding.png
        \row
            \o  \bold {\l{Managing Projects}}

                To be able to build and run applications, \QC needs the same
                information as a compiler would need. This information is
                specified in the project settings.

                Setting up a new project in \QC is aided by a wizard that guides
                you step-by-step through the project creation process, creates
                the necessary files, and specifies settings depending on the
                choices you make. For more information, see
                \l{Managing Projects}.
            \o  \bold {\l{Designing User Interfaces}}

                \QC provides two integrated visual editors, \QMLD and \QD.
                To create intuitive, modern-looking, fluid user interfaces, you
                can use \l {http://doc.qt.nokia.com/4.7/qtquick.html}{Qt Quick}.
                If you need a traditional user interface that is clearly
                structured and enforces a platform look and feel, you can use
                the integrated \QD. For more information, see
                \l{Designing User Interfaces}.
            \o  \bold {\l{Coding}}

                As an IDE, \QC differs from a text editor in that it knows how
                to build and run applications. It understands the C++ and QML
                languages as code, not just as plain text. This enables it to
                provide you with useful features, such as semantic highlighting,
                checking code syntax, code completion, and refactoring actions.
                For more information, see \l{Coding}.
        \row
            \o  \inlineimage creator_buildingrunning.png
            \o  \inlineimage creator_testing.png
            \o  \inlineimage creator_publishing.png
        \row
            \o  \bold {\l{Building and Running}}

                \QC is integrated with cross-platform systems for build
                automation: qmake and CMake. In addition, you can import
                projects as \e {generic projects} and fully control the steps
                and commands used to build the project.

                \QC provides support for building, running, and deploying Qt
                applications for desktop environment and mobile devices. Build,
                run, and deployment settings allow you to quickly switch between
                targets.

                For more information, see \l{Building and Running}.
            \o  \bold {\l{Debugging and Analyzing}}

                \QC is integrated to several external native debuggers: GNU
                Symbolic Debugger (GDB), Microsoft Console Debugger (CDB), and
                and internal JavaScript debugger. In the \gui Debug mode, you
                can inspect the state of your application while debugging.

                The memory and CPU power available on devices are limited and
                you should use them carefully. \QC integrates Valgrind code
                analysis tools for detecting memory leaks and profiling function
                execution. In addition, the QML Profiler enables you to profile
                Qt Quick applications.

                For more information, see \l{Debugging and Analyzing}.
            \o  \bold {\l{Publishing}}

                \QC allows you to create installation packages for mobile
                devices that are suitable for publishing to application stores
                and other channels. For more information, see
                \l{Publishing}.
    \endtable

*/
