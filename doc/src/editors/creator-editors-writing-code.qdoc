/****************************************************************************
**
** This file is part of Qt Creator
**
** Copyright (c) 2011 Nokia Corporation and/or its subsidiary(-ies).
**
** Contact: Nokia Corporation (qt-info@nokia.com)
**
**
** GNU Free Documentation License
**
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
****************************************************************************/

// **********************************************************************
// NOTE: the sections are not ordered by their logical order to avoid
// reshuffling the file each time the index order changes (i.e., often).
// Run the fixnavi.pl script to adjust the links to the index order.
// **********************************************************************

/*!
    \contentspage index.html
    \previouspage creator-coding.html
    \page creator-editor-functions.html
    \nextpage creator-coding-navigating.html

    \title Writing Code

    The \QC code editor is fully equipped with semantic highlighting, syntax
    checking, code completion, code indentation, context sensitive help, and
    in-line error indicators while you are typing.

    \list

        \o  \l{Working in Edit Mode}

            You can use the editor toolbar to navigate between open files
            and symbols in use. You can also split the view to work on
            several files simultaneously, add bookmarks, and move between
            symbol definitions and declarations.

        \o  \l{Semantic Highlighting}

            \QC enables you to write well formatted code by highlighting
            code elements and blocks. You can use syntax highlighting
            also for other types of files than C++ or QML.

        \o  \l{Checking Code Syntax}

            \QC checks for errors when you write code and displays inline
            error and warning messages.

        \o  \l{Completing Code}

            \QC anticipates what you are going to write and completes code
            and code snippets for elements, properties, and IDs.

        \o  \l{Indenting Code}

            \QC indents code according to rules that you specify either
            globally for all files or separately for text, C++, or QML files.

        \o  \l{Using Qt Quick Toolbars}

            When you edit QML code in the code editor, you specify the
            properties of QML components. For some properties, such as
            colors and font names, this is not a trivial task. For example,
            few people can visualize the color #18793f. To easily edit these
            properties, you can use the Qt Quick Toolbars.

        \o  \l{Pasting and Fetching Code Snippets}

            You can cooperate with other developers by pasting and fetching
            snippets of code from a server. For example, you might ask
            colleagues to review a change that you plan to submit to a
            version control system.

        \o  \l{Using Text Editing Macros}

            When you have a file open in the code editor, you can record a
            keyboard sequence as a macro. You can then play the macro to
            repeat the sequence. You can save the latest macro and assign a
            keyboard shortcut for running it or run it from the locator.

    \endlist

*/
